apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: 'versioning.gradle'
apply plugin: 'io.fabric'

android {

    def packageId = "br.org.cesar.discordtime.stickysessions"

    def versionMap = getVersionMap()

    compileSdkVersion 28
    defaultConfig {
        applicationId packageId
        minSdkVersion 23
        targetSdkVersion 28
        versionCode versionMap.code
        versionName versionMap.name
        testInstrumentationRunner "br.org.cesar.discordtime.stickysessions.MockTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    sourceSets {
        main { res.srcDirs = ['src/main/res'] }
        test { res.srcDirs = ['src/test/res/'] }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "server"

    productFlavors {
        prod {
            dimension "server"
            ext {
                url = "http://142.93.124.175"
            }
            resValue "string", "app_name", "Sticky Sessions"
        }
        stag {
            dimension "server"
            applicationId = "${packageId}.stag"
            ext {
                url = "http://142.93.124.175:8080"
            }
            resValue "string", "app_name", "Sticky Sessions (Staging)"
        }
        local {
            dimension "server"
            applicationId = "${packageId}.local"
            ext {
                url = "http://localhost:3000"
            }
            resValue "string", "app_name", "Sticky Sessions (Local)"
        }
        applicationVariants.all { variant ->
            def flavors = variant.productFlavors
            // flavorDimensions "server" -> 0
            def server = flavors[0]
            variant.buildConfigField "String", "URL", "\"${server[url.name]}\""
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError true
        checkAllWarnings true
        warningsAsErrors true
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android X
    implementation "androidx.appcompat:appcompat:${versions.androidx}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx}"
    implementation "androidx.annotation:annotation:${versions.androidx}"
    implementation "androidx.legacy:legacy-support-v4:${versions.androidx}"
    implementation "androidx.cardview:cardview:${versions.androidx}"
    implementation "com.google.android.material:material:${versions.material}"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    // Rx
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rx_kotlin}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rx_android}"
    implementation "io.reactivex.rxjava2:rxjava:${versions.rx_java}"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"

    // OkHttp3
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    // Dagger
    annotationProcessor 'com.google.dagger:dagger-compiler:2.18'
    implementation 'com.google.dagger:dagger:2.18'

    //Fabric
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }

    // Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation "com.nhaarman:mockito-kotlin:${versions.mockito_kotlin}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"

    // Instrumentation tests
    // Core library
    androidTestImplementation 'androidx.test:core:1.0.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.1.0'

    // Other dependencies
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'com.google.dagger:dagger:2.18'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
}
repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}
